#!/bin/bash
#  Mount all file systems

mountebs()
{
  local VOLID=$1
  local fileowner=$2
  local mountpoint=$3
  local filecnt=$4

  devarray=(/dev/xvdh /dev/xvdi /dev/xvdj /dev/xvdk /dev/xvhl)
  DEVINFO=${devarray[$filecnt]}

$AWS ec2 attach-volume --device $DEVINFO --volume-id $VOLID --instance-id $INSTID --region=$REGION
sleep 20
state=$($AWS ec2 describe-volumes --region $REGION --volume-ids $VOLID --query  "Volumes[].Attachments[].State" --output text)
if [ "$state" == "attached" ] ; then
   echo "$VOLID attached successfully" 
else
   echo "$state ... Waitting another 40s for $VOLID to attach"
   sleep 40
   $AWS ec2 describe-volumes --region $REGION --volume-ids $VOLID --query  "Volumes[].Attachments[].State" --output text
fi

echo "Checking if the $DEVINFO has been initialized ..."
cnt=`file -s $DEVINFO | grep -c ': data'`
if [ $cnt -ne 1 ] ; then
   echo "Info: DEVICE $DEVINFO is already INITIALIZED."
else
   echo "Info: Initializing device $DEVINFO ..."
   mkfs -t ext4 $DEVINFO
fi

blkid $DEVINFO | awk '{print $2 " MOUNTP ext4 defaults,nofail  0 2"}' | sed s/\"//g > /tmp/fstab.tmp
echo "Info:  Updating the /etc/fstab ..."
cp -p /etc/fstab /etc/fstab.backup.$$
sed "s:MOUNTP:$mountpoint:g" /tmp/fstab.tmp >> /etc/fstab
mkdir -p $mountpoint
echo "Info: Mounting $DEVINFO ..."
mount -a
chown $fileowner:$fileowner $mountpoint
return 0
} 

mountefs()
{
  local efsvol=$1
  local fileowner=$2
  local mountpoint=$3

set -xv
echo "Info: Mounting EFS $efsvol  $mountpoint ..."
mkdir -p $mountpoint
mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $efsvol:/   $mountpoint
if [ $? -ne 0 ] ; then
  sleep 60
  mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $efsvol:/   $mountpoint
  if [ $? -ne 0 ] ; then
     sleep 60
     mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $efsvol:/   $mountpoint
  fi
fi

chown $fileowner:$fileowner $mountpoint
return 0
} 

# main routing

if [ ! -f $MOUNTFILES ] ; then
   echo "Info:  Nothing to mount..."
else
filecount=1
cat $MOUNTFILES | while read inrec
do

  fstype=`echo $inrec | awk  '{print $1}'`
  mountp=`echo $inrec | awk  '{print $2}'`
  fowner=`echo $inrec | awk  '{print $3}'`
  volinfo=`echo $inrec | awk '{print $4}'`

  case "$fstype" in
   ebs|EBS)
     mountebs $volinfo  $fowner  $mountp  $filecount
     filecount=$((filecount))
     ;;
   efs|EFS)
     mountefs $volinfo  $fowner  $mountp
     ;;
   *) echo "Error: Invalid FileType (ebs or efs) "
     ;;
  esac

done
fi
#  end of script
